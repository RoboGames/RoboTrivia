{"version":3,"sources":["Components/Modal.js","Components/Header.js","Components/ScoreBar.js","firebase.js","Components/GameArea.js","App.js","serviceWorker.js","index.js"],"names":["Modal","this","props","showModal","className","playerArray","map","player","key","htmlFor","type","id","onChange","getNicknameFunc","name","placeholder","value","nickname","Component","Header","e","state","numberOfPlayers","setState","setPlayers","players","Array","parseInt","fill","score","getNickname","playersUpdate","target","handleInput","submitInput","preventDefault","category","difficultyLevel","callApiFunc","alert","randomRobos","src","alt","action","onClick","ScoreBar","currentPlayer","isPlaying","avatars","robo","class","playerData","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","GameArea","storeCurrentGame","index","renderQuestions","length","dbRef","database","ref","playerInfo","userName","allPlayers","userScore","push","nextQuestion","event","console","log","correct_answer","cloneAllPlayers","playerIndex","iteratePlayer","highScores","on","result","data","val","playerScores","prevProps","question","choices","choice","App","smoothScroll","gameRef","current","scrollIntoView","beahvior","block","choiceLibrary","choiceTemp","incorrect_answers","numberOfChoices","randomIndex","Math","floor","random","splice","populateChoices","resultsArray","i","callApi","difficulty","numberOfQuestions","axios","url","params","amount","then","response","results","questionArray","generateAvatar","catch","error","robos","randomNumber","React","createRef","calssName","aria-hidden","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c5695a48.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\r\n\r\nexport default class Modal extends Component {\r\n   render() {\r\n      if (!this.props.showModal){\r\n         return null\r\n      }\r\n      return (\r\n         <div className=\"wrapper modal\">\r\n               <p>Choose Your Nicknames</p>\r\n                  <div className=\"criteriaSection\">\r\n                     {\r\n                        this.props.playerArray.map((player, key) =>{\r\n                           return(\r\n                              <div key={\"nickname\" + key}>\r\n                                 <label htmlFor=\"name\" className='sr-only' key={\"label\" + key}>Player {key + 1}</label>\r\n                                 <input type=\"text\" key ={key} id = {key} onChange={this.props.getNicknameFunc} className=\"nicknameInput\" name=\"nicknameInput\" placeholder = {\"Player \" + (key + 1)} value={player.nickname}/>\r\n                              </div>\r\n                           )\r\n                        })\r\n                     }\r\n                  </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Modal from './Modal';\r\n\r\nclass Header extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            showModal: false,\r\n            players: [],\r\n            numberOfPlayers: 0,\r\n            randomRobos: []\r\n        }\r\n    }\r\n\r\n    showModal = (e) =>{\r\n        if(this.state.numberOfPlayers > 0){\r\n            this.setState({\r\n                showModal: true\r\n            })\r\n        }else{\r\n            this.setState({\r\n                showModal: false\r\n            })\r\n        }\r\n    }\r\n\r\n    setPlayers = () => {\r\n        let players = Array(parseInt(this.state.numberOfPlayers)).fill({\r\n        nickname:\"\",\r\n        score: 0\r\n        })\r\n        this.setState({\r\n            players: players\r\n        })\r\n    }\r\n\r\n    getNickname = (e) =>{\r\n        const playersUpdate = [...this.state.players];\r\n        playersUpdate[e.target.id] = {nickname:e.target.value, score:0}\r\n        this.setState({\r\n            players: playersUpdate\r\n        })\r\n    }\r\n\r\n    handleInput = (e) =>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        }, () =>{\r\n            this.setPlayers();\r\n            this.showModal(e);\r\n        })\r\n    }\r\n\r\n    submitInput = (e) =>{\r\n        e.preventDefault();\r\n        if(this.state.category && this.state.difficultyLevel && this.state.numberOfPlayers){\r\n            this.props.callApiFunc(this.state.category, this.state.difficultyLevel, this.state.numberOfPlayers, this.state.players, true)\r\n        }else{\r\n            alert(\"Please select all of the criteria.\")\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n    return (\r\n        <header>\r\n            <div className = \"wrapper\">\r\n                {/* */}\r\n                <img src=\"\" alt=\"\"/>\r\n                <h1>Robo<i className=\"fas fa-robot\"></i>Trivia</h1>\r\n                <form action=\"\">\r\n                    <div className = \"criteriaSection\">\r\n                        <div className = \"criteriaType\">\r\n                            <label htmlFor=\"\">Choose a Category</label>\r\n                            <select name=\"category\" id=\"\" onChange={this.handleInput}>\r\n                                <option value=''>Choose...</option>\r\n                                <option value=\"9\">General Knowledge</option>\r\n                                <option value=\"17\">Science and Nature</option>\r\n                                <option value=\"11\">Films</option> \r\n                                <option value=\"21\">Sports</option>\r\n                                <option value=\"27\">Animals</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className = \"criteriaType criteriaTypeTwo\">\r\n                            <label htmlFor=\"\">Difficulty Level</label>\r\n                            <select name=\"difficultyLevel\" id=\"\" onChange={this.handleInput}>\r\n                                <option value=''>Choose...</option>\r\n                                <option value=\"easy\">Easy</option>\r\n                                <option value=\"medium\">Medium</option>\r\n                                <option value=\"hard\">Hard</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className = \"criteriaType\">\r\n                        <label htmlFor=\"\">Number of Players</label>\r\n                        <select name=\"numberOfPlayers\" id=\"\" onChange={this.handleInput}>\r\n                            <option value='0'>Choose...</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                        </select>\r\n                        </div>\r\n                    </div>\r\n                    <p>Each player will recieve 10 questions, players take turns answering unique questions</p>\r\n                    <Modal \r\n                    showModal = {this.state.showModal}\r\n                    numberOfPlayers = {this.state.numberOfPlayers}\r\n                    playerArray = {this.state.players}\r\n                    getNicknameFunc = {this.getNickname}\r\n                    />\r\n                    <button className = \"button\" type=\"submit\" onClick={this.submitInput}>Let's Play</button>\r\n                </form>\r\n            </div>\r\n        </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\n\r\nclass ScoreBar extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            currentPlayer: ''\r\n        }\r\n    }\r\n    render() {\r\n        if (this.props.isPlaying === false) {\r\n            return null\r\n        }else{\r\n            return (\r\n                <div className=\"scorebar\">\r\n                    <div className=\"wrapper avatorContainer\">\r\n                    {\r\n                        this.props.avatars.map((robo, key) => {\r\n                        return <div className=\"playerAvatar\">\r\n                                    <img src={`https://robohash.org/${robo}`} alt=\"cool guy\"/>\r\n                                    <p class=\"playerName\">{this.props.playerData[key].nickname}</p>\r\n                                    <p>score: {this.props.playerData[key].score}</p></div>\r\n                        })\r\n                    }       \r\n                </div>\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default ScoreBar\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyC-EOfx9305TGGXDP9lYpjjXpI8s06haLc\",\r\n    authDomain: \"robo-games.firebaseapp.com\",\r\n    databaseURL: \"https://robo-games.firebaseio.com\",\r\n    projectId: \"robo-games\",\r\n    storageBucket: \"robo-games.appspot.com\",\r\n    messagingSenderId: \"673193781123\",\r\n    appId: \"1:673193781123:web:3d586b0a488a47979938b6\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase\r\n\r\n\r\n  // A basic function that on submit pushes user data to firebase\r\n// Instead of onSubmit need to find a way for this to fire on game end - perhaps with a gameend function\r\n// handleSubmit(event) {\r\n//     event.preventDefault();\r\n//     const dbRef = firebase.database().ref()\r\n//     const playerInfo = {\r\n//         userName: this.state.allPlayers.nickname,\r\n//         userScore: this.state.allPlayers.score,\r\n//     }\r\n//     dbRef.push(playerInfo)\r\n// }\r\n\r\n// Displaying the highscores will be a simple map function of on componentDidMount that as well checks to make sure theres no empty data\r\n // Pull our database data and push the values into the notes array\r\n// componentDidMount() {\r\n    // const dbRef = firebase.database().ref();\r\n    // dbRef.on('value', (result) => {\r\n    //     const data = result.val();\r\n    //     const playerArray = []\r\n    //     for (let key in data) {\r\n    //         playerArray.push({\r\n    //             userName: data[key].userName,\r\n    //             userScore: data[key].userScore\r\n    //         })\r\n    //     }\r\n    //     this.setState({\r\n    //         highscores: noteArray\r\n    //     })\r\n    // })\r\n// }","import React, { Component } from 'react'\r\nimport ScoreBar from './ScoreBar'\r\nimport firebase from '../firebase';\r\n\r\nclass GameArea extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            allPlayers: [],\r\n            index: 0,\r\n            userScore: 0,\r\n            playerIndex: 0,\r\n            highScores: []\r\n        }\r\n    }\r\n\r\n    // Pulls our data from firebase and is mapped and displayed at end of game on line 129\r\n    componentDidMount(){\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.on('value', (result) => {\r\n            const data = result.val();\r\n            console.log(data);\r\n            const playerScores = []\r\n            for (let key in data) {\r\n                playerScores.push({\r\n                    userName: data[key].userName,\r\n                    userScore: data[key].userScore\r\n                })\r\n            }\r\n        this.setState({ \r\n            highScores: playerScores\r\n        })\r\n    })\r\n    } \r\n    \r\n    // Pushing data to firebase on game over\r\n    // Wrote this function to fire onClick where the IF statement is true - i.e. when we're on the last question execute this function and push data we have in our allPlayers array to firebase\r\n    // Not working currently; causes the webpage to not refresh to next question\r\n    // Also considered just firing this function when the game ends and the ternery operator displays the gameover/leaderboard\r\n    // For that see line 120\r\n    storeCurrentGame = () => {\r\n        if (this.state.index === this.props.renderQuestions.length - 1){\r\n            const dbRef = firebase.database().ref()\r\n            const playerInfo = {\r\n            userName: this.state.allPlayers.nickname,\r\n            userScore: this.state.allPlayers.score,\r\n            }\r\n            dbRef.push(playerInfo)\r\n        } else {\r\n            return null\r\n        }\r\n}\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.playerData !== prevProps.playerData) {\r\n            this.setState({\r\n                allPlayers: this.props.playerData\r\n            })\r\n        }\r\n    }\r\n\r\n    nextQuestion = (event) => {\r\n        console.log(event.target.value);\r\n        if (event.target.value === this.props.renderQuestions[this.state.index].correct_answer) {\r\n            const cloneAllPlayers = [...this.state.allPlayers];\r\n            cloneAllPlayers[this.state.playerIndex].score++;\r\n            this.setState({\r\n                allPlayers: cloneAllPlayers\r\n\r\n            }, () => {\r\n                this.iteratePlayer()\r\n            });\r\n        } else{\r\n            this.iteratePlayer()\r\n        }\r\n    }\r\n\r\n    iteratePlayer = () => {\r\n        if (this.state.playerIndex < this.state.allPlayers.length - 1) {\r\n            this.setState({\r\n                playerIndex: this.state.playerIndex + 1,\r\n                index: (this.state.index + 1)\r\n            })\r\n        } else {\r\n            this.setState({\r\n                playerIndex: 0,\r\n                index: (this.state.index + 1)\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n            return (\r\n                <>\r\n                <ScoreBar isPlaying={this.props.isPlaying} \r\n                        renderQuestions={this.props.renderQuestions}\r\n                        avatars={this.props.avatars}\r\n                        playerData={this.state.allPlayers}/>\r\n\r\n                <div className=\"gameArea\">\r\n                    <div className = \"wrapper\">\r\n                    {\r\n                        this.state.allPlayers.length > 0 && this.state.index <= this.props.renderQuestions.length - 1\r\n                        ? <h4 className=\"animate__animated animate__tada\">Current Player: <span>{this.state.allPlayers[this.state.playerIndex].nickname}</span></h4>\r\n                        : null\r\n                    }\r\n\r\n                    {\r\n                        this.props.renderQuestions.length === 0 \r\n                        ? null\r\n                        : <div>{this.state.index <= this.props.renderQuestions.length - 1\r\n                                ? <div className =\"questionContainer\">\r\n                                    <h3 className=\"question\"><span>Q: </span>{this.props.renderQuestions[this.state.index].question}</h3>\r\n                                    <ul>\r\n                                        {this.props.renderQuestions[this.state.index].choices.map((choice)=>{\r\n                                        return(\r\n                                            <li>\r\n                                                <button className=\"answersButton\" onClick={this.nextQuestion} value={choice}>{choice}</button>\r\n                                            </li>\r\n                                        )\r\n                                        })}\r\n                                    </ul>\r\n                                    </div>\r\n                                    : <div>\r\n                                        {/* this.storeCurrentGame() to launch here once we run out of questions - couldnt get it to execute this is an option if we can get it to work */}\r\n                                        <h1>Thanks for Playing!</h1>\r\n                                        {\r\n                                            this.state.allPlayers.map((player) => {\r\n                                                return(\r\n                                                    <p>{player.nickname} your score is: {player.score}!</p>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                        <h1>Leaderboard:</h1>\r\n                                        {\r\n                                            this.state.highScores.map((player) => {\r\n                                                return (\r\n                                                <p>{player.userName}: {player.userScore}</p>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </div>\r\n                                }</div>   \r\n                    }\r\n                    </div>\r\n                </div>\r\n                </>\r\n            )\r\n        }\r\n    }\r\nexport default GameArea\r\n// Created a lifted state of players in an array\r\n// On turn end 'answer submit' move to next player in array (setState of current player to next by Index)\r\n// Check current index of player then ++ (perhaps indexOf)","import React, { Component } from 'react';\r\nimport Header from './Components/Header';\r\nimport GameArea from './Components/GameArea'\r\nimport './Styles/styles.scss';\r\n\r\nimport axios from 'axios';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      resultsArray:[],\r\n      questionArray:[],\r\n      isPlaying: false,\r\n      randomRobos: [],\r\n      currentPlayer:'',\r\n      renderQuestions:[]\r\n    }\r\n    this.gameRef = React.createRef();\r\n  }\r\n\r\n  // smooth scroll to game section\r\n  smoothScroll = () => {\r\n    let element = this.gameRef.current\r\n    element.scrollIntoView({beahvior:'smooth',block:'start'})\r\n  }\r\n\r\n\r\n  //  Choices Array\r\n  choiceLibrary = (result)=>{\r\n    //  push incorrect choices in to the choice array\r\n    const choiceTemp = result.incorrect_answers\r\n    const numberOfChoices = result.incorrect_answers.length + 1\r\n    //  randomizing function to randomize the correct answer index\r\n    const randomIndex = Math.floor(Math.random() * numberOfChoices);\r\n    // add correct answer in a random position of the choice array\r\n    choiceTemp.splice(randomIndex, 0, result.correct_answer)\r\n    return choiceTemp\r\n  }\r\n\r\n  \r\n  populateChoices = () =>{\r\n    const choiceLibrary = []\r\n    this.state.resultsArray.map((result, i) =>{\r\n      choiceLibrary.push({\r\n        question: result.question,\r\n        choices: this.choiceLibrary(result),\r\n        correct_answer: result.correct_answer\r\n      })\r\n    })\r\n    this.setState({\r\n      renderQuestions: choiceLibrary\r\n    })\r\n  }\r\n\r\n  callApi = (category, difficulty, numberOfPlayers, players, isPlaying) =>{\r\n    let numberOfQuestions = numberOfPlayers * 5\r\n    axios({\r\n      url: 'https://opentdb.com/api.php',\r\n      params: {\r\n        category: category,\r\n        amount: numberOfQuestions,\r\n        type:'multiple',\r\n        difficulty:difficulty\r\n      }\r\n    }).then((response) => {\r\n        this.setState({\r\n          resultsArray:response.data.results,\r\n          numberOfPlayers: numberOfPlayers,\r\n          questionArray:response.data,\r\n          players: players,\r\n          isPlaying: isPlaying\r\n        }, () =>{\r\n          this.generateAvatar();\r\n          this.populateChoices();\r\n        })\r\n\r\n      if(this.state.resultsArray.length > 0){\r\n        this.smoothScroll();\r\n      }\r\n      // error handling: when api call fails, alert user\r\n    }).catch(error => {\r\n      alert('Sorry, failed to load questions ')\r\n    })\r\n  }\r\n\r\n  generateAvatar = () => {\r\n    const robos = [];\r\n    for (let players = 0; players < this.state.numberOfPlayers; players++) {\r\n        const randomNumber = Math.floor(Math.random() * 1000);\r\n        robos.push(randomNumber);\r\n    }\r\n    this.setState({\r\n        randomRobos: robos\r\n    })\r\n}\r\n\r\n\r\n  render(){\r\n    return (\r\n      <>\r\n          <Header\r\n            callApiFunc = {this.callApi}\r\n          />\r\n          <main className='gameArea' ref={this.gameRef}>\r\n            {/* <ScoreBar\r\n              playerData={this.state.players} \r\n            /> */}\r\n            <GameArea \r\n            avatars={this.state.randomRobos}\r\n            isPlaying={this.state.isPlaying}\r\n            playerData={this.state.players} \r\n            renderQuestions = {this.state.renderQuestions}\r\n            />\r\n          </main>\r\n\r\n          <footer>\r\n            <div calssName=\"wrapper\">\r\n              <p>Copyright <span aria-hidden=\"true\">&copy;</span> 2020 by Aleksandar Nikolic, Jane Yuan, Maliheh Naderan and Punnet Birdi</p>\r\n            </div>\r\n          </footer>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}